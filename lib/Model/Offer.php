<?php
/**
 * Offer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Allegro REST API
 *
 * https://developer.allegro.pl/about  Documentation is generated from [this](https://developer.allegro.pl/swagger.yaml) OpenAPI 3.0 specification file.
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.33
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Offer Class Doc Comment
 *
 * @category Class
 * @description Single offer data.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Offer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Offer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'additional_services' => '\Swagger\Client\Model\JustId',
'after_sales_services' => '\Swagger\Client\Model\AfterSalesServices',
'attachments' => '\Swagger\Client\Model\Attachment[]',
'category' => 'AllOfOfferCategory',
'compatibility_list' => '\Swagger\Client\Model\CompatibilityList',
'contact' => '\Swagger\Client\Model\JustId',
'created_at' => '\DateTime',
'custom_parameters' => '\Swagger\Client\Model\CustomParameter[]',
'delivery' => '\Swagger\Client\Model\DeliveryFull',
'description' => '\Swagger\Client\Model\StandardizedDescription',
'discounts' => '\Swagger\Client\Model\Discounts',
'external' => '\Swagger\Client\Model\ExternalId',
'fundraising_campaign' => '\Swagger\Client\Model\JustId',
'id' => 'string',
'images' => '\Swagger\Client\Model\ImageUrl[]',
'location' => '\Swagger\Client\Model\Location',
'name' => 'string',
'parameters' => '\Swagger\Client\Model\Parameter[]',
'payments' => '\Swagger\Client\Model\Payments',
'product' => '\Swagger\Client\Model\JustId',
'promotion' => '\Swagger\Client\Model\Promotion',
'publication' => '\Swagger\Client\Model\Publication',
'selling_mode' => '\Swagger\Client\Model\SellingModeWithNetPrice',
'tax' => '\Swagger\Client\Model\ExtendedTax',
'size_table' => '\Swagger\Client\Model\JustId',
'stock' => '\Swagger\Client\Model\Stock',
'tecdoc_specification' => '\Swagger\Client\Model\TecdocSpecification',
'b2b' => '\Swagger\Client\Model\B2b',
'updated_at' => '\DateTime',
'validation' => '\Swagger\Client\Model\Validation'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'additional_services' => null,
'after_sales_services' => null,
'attachments' => null,
'category' => null,
'compatibility_list' => null,
'contact' => null,
'created_at' => 'date-time',
'custom_parameters' => null,
'delivery' => null,
'description' => null,
'discounts' => null,
'external' => null,
'fundraising_campaign' => null,
'id' => null,
'images' => null,
'location' => null,
'name' => null,
'parameters' => null,
'payments' => null,
'product' => null,
'promotion' => null,
'publication' => null,
'selling_mode' => null,
'tax' => null,
'size_table' => null,
'stock' => null,
'tecdoc_specification' => null,
'b2b' => null,
'updated_at' => 'date-time',
'validation' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_services' => 'additionalServices',
'after_sales_services' => 'afterSalesServices',
'attachments' => 'attachments',
'category' => 'category',
'compatibility_list' => 'compatibilityList',
'contact' => 'contact',
'created_at' => 'createdAt',
'custom_parameters' => 'customParameters',
'delivery' => 'delivery',
'description' => 'description',
'discounts' => 'discounts',
'external' => 'external',
'fundraising_campaign' => 'fundraisingCampaign',
'id' => 'id',
'images' => 'images',
'location' => 'location',
'name' => 'name',
'parameters' => 'parameters',
'payments' => 'payments',
'product' => 'product',
'promotion' => 'promotion',
'publication' => 'publication',
'selling_mode' => 'sellingMode',
'tax' => 'tax',
'size_table' => 'sizeTable',
'stock' => 'stock',
'tecdoc_specification' => 'tecdocSpecification',
'b2b' => 'b2b',
'updated_at' => 'updatedAt',
'validation' => 'validation'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additional_services' => 'setAdditionalServices',
'after_sales_services' => 'setAfterSalesServices',
'attachments' => 'setAttachments',
'category' => 'setCategory',
'compatibility_list' => 'setCompatibilityList',
'contact' => 'setContact',
'created_at' => 'setCreatedAt',
'custom_parameters' => 'setCustomParameters',
'delivery' => 'setDelivery',
'description' => 'setDescription',
'discounts' => 'setDiscounts',
'external' => 'setExternal',
'fundraising_campaign' => 'setFundraisingCampaign',
'id' => 'setId',
'images' => 'setImages',
'location' => 'setLocation',
'name' => 'setName',
'parameters' => 'setParameters',
'payments' => 'setPayments',
'product' => 'setProduct',
'promotion' => 'setPromotion',
'publication' => 'setPublication',
'selling_mode' => 'setSellingMode',
'tax' => 'setTax',
'size_table' => 'setSizeTable',
'stock' => 'setStock',
'tecdoc_specification' => 'setTecdocSpecification',
'b2b' => 'setB2b',
'updated_at' => 'setUpdatedAt',
'validation' => 'setValidation'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additional_services' => 'getAdditionalServices',
'after_sales_services' => 'getAfterSalesServices',
'attachments' => 'getAttachments',
'category' => 'getCategory',
'compatibility_list' => 'getCompatibilityList',
'contact' => 'getContact',
'created_at' => 'getCreatedAt',
'custom_parameters' => 'getCustomParameters',
'delivery' => 'getDelivery',
'description' => 'getDescription',
'discounts' => 'getDiscounts',
'external' => 'getExternal',
'fundraising_campaign' => 'getFundraisingCampaign',
'id' => 'getId',
'images' => 'getImages',
'location' => 'getLocation',
'name' => 'getName',
'parameters' => 'getParameters',
'payments' => 'getPayments',
'product' => 'getProduct',
'promotion' => 'getPromotion',
'publication' => 'getPublication',
'selling_mode' => 'getSellingMode',
'tax' => 'getTax',
'size_table' => 'getSizeTable',
'stock' => 'getStock',
'tecdoc_specification' => 'getTecdocSpecification',
'b2b' => 'getB2b',
'updated_at' => 'getUpdatedAt',
'validation' => 'getValidation'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additional_services'] = isset($data['additional_services']) ? $data['additional_services'] : null;
        $this->container['after_sales_services'] = isset($data['after_sales_services']) ? $data['after_sales_services'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['compatibility_list'] = isset($data['compatibility_list']) ? $data['compatibility_list'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['custom_parameters'] = isset($data['custom_parameters']) ? $data['custom_parameters'] : null;
        $this->container['delivery'] = isset($data['delivery']) ? $data['delivery'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['discounts'] = isset($data['discounts']) ? $data['discounts'] : null;
        $this->container['external'] = isset($data['external']) ? $data['external'] : null;
        $this->container['fundraising_campaign'] = isset($data['fundraising_campaign']) ? $data['fundraising_campaign'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['parameters'] = isset($data['parameters']) ? $data['parameters'] : null;
        $this->container['payments'] = isset($data['payments']) ? $data['payments'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['promotion'] = isset($data['promotion']) ? $data['promotion'] : null;
        $this->container['publication'] = isset($data['publication']) ? $data['publication'] : null;
        $this->container['selling_mode'] = isset($data['selling_mode']) ? $data['selling_mode'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['size_table'] = isset($data['size_table']) ? $data['size_table'] : null;
        $this->container['stock'] = isset($data['stock']) ? $data['stock'] : null;
        $this->container['tecdoc_specification'] = isset($data['tecdoc_specification']) ? $data['tecdoc_specification'] : null;
        $this->container['b2b'] = isset($data['b2b']) ? $data['b2b'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['validation'] = isset($data['validation']) ? $data['validation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additional_services
     *
     * @return \Swagger\Client\Model\JustId
     */
    public function getAdditionalServices()
    {
        return $this->container['additional_services'];
    }

    /**
     * Sets additional_services
     *
     * @param \Swagger\Client\Model\JustId $additional_services additional_services
     *
     * @return $this
     */
    public function setAdditionalServices($additional_services)
    {
        $this->container['additional_services'] = $additional_services;

        return $this;
    }

    /**
     * Gets after_sales_services
     *
     * @return \Swagger\Client\Model\AfterSalesServices
     */
    public function getAfterSalesServices()
    {
        return $this->container['after_sales_services'];
    }

    /**
     * Sets after_sales_services
     *
     * @param \Swagger\Client\Model\AfterSalesServices $after_sales_services after_sales_services
     *
     * @return $this
     */
    public function setAfterSalesServices($after_sales_services)
    {
        $this->container['after_sales_services'] = $after_sales_services;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Swagger\Client\Model\Attachment[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Swagger\Client\Model\Attachment[] $attachments List of offer attachments. You can attach up to 7 files to the offer – one per each attachment type as described in <a href=\"/documentation/#operation/createOfferAttachmentUsingPOST\" target=\"_blank\">uploading offer attachments flow</a>.
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets category
     *
     * @return AllOfOfferCategory
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param AllOfOfferCategory $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets compatibility_list
     *
     * @return \Swagger\Client\Model\CompatibilityList
     */
    public function getCompatibilityList()
    {
        return $this->container['compatibility_list'];
    }

    /**
     * Sets compatibility_list
     *
     * @param \Swagger\Client\Model\CompatibilityList $compatibility_list compatibility_list
     *
     * @return $this
     */
    public function setCompatibilityList($compatibility_list)
    {
        $this->container['compatibility_list'] = $compatibility_list;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Swagger\Client\Model\JustId
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \Swagger\Client\Model\JustId $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Creation date: Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ. Cannot be modified.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets custom_parameters
     *
     * @return \Swagger\Client\Model\CustomParameter[]
     */
    public function getCustomParameters()
    {
        return $this->container['custom_parameters'];
    }

    /**
     * Sets custom_parameters
     *
     * @param \Swagger\Client\Model\CustomParameter[] $custom_parameters List of custom parameters. You can add up to 4 custom parameters, each containing exactly one value.
     *
     * @return $this
     */
    public function setCustomParameters($custom_parameters)
    {
        $this->container['custom_parameters'] = $custom_parameters;

        return $this;
    }

    /**
     * Gets delivery
     *
     * @return \Swagger\Client\Model\DeliveryFull
     */
    public function getDelivery()
    {
        return $this->container['delivery'];
    }

    /**
     * Sets delivery
     *
     * @param \Swagger\Client\Model\DeliveryFull $delivery delivery
     *
     * @return $this
     */
    public function setDelivery($delivery)
    {
        $this->container['delivery'] = $delivery;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \Swagger\Client\Model\StandardizedDescription
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \Swagger\Client\Model\StandardizedDescription $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets discounts
     *
     * @return \Swagger\Client\Model\Discounts
     */
    public function getDiscounts()
    {
        return $this->container['discounts'];
    }

    /**
     * Sets discounts
     *
     * @param \Swagger\Client\Model\Discounts $discounts discounts
     *
     * @return $this
     */
    public function setDiscounts($discounts)
    {
        $this->container['discounts'] = $discounts;

        return $this;
    }

    /**
     * Gets external
     *
     * @return \Swagger\Client\Model\ExternalId
     */
    public function getExternal()
    {
        return $this->container['external'];
    }

    /**
     * Sets external
     *
     * @param \Swagger\Client\Model\ExternalId $external external
     *
     * @return $this
     */
    public function setExternal($external)
    {
        $this->container['external'] = $external;

        return $this;
    }

    /**
     * Gets fundraising_campaign
     *
     * @return \Swagger\Client\Model\JustId
     */
    public function getFundraisingCampaign()
    {
        return $this->container['fundraising_campaign'];
    }

    /**
     * Sets fundraising_campaign
     *
     * @param \Swagger\Client\Model\JustId $fundraising_campaign fundraising_campaign
     *
     * @return $this
     */
    public function setFundraisingCampaign($fundraising_campaign)
    {
        $this->container['fundraising_campaign'] = $fundraising_campaign;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \Swagger\Client\Model\ImageUrl[]
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \Swagger\Client\Model\ImageUrl[] $images images
     *
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \Swagger\Client\Model\Location
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \Swagger\Client\Model\Location $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the offer. Words used in the name field cannot be longer than 50 characters.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return \Swagger\Client\Model\Parameter[]
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param \Swagger\Client\Model\Parameter[] $parameters parameters
     *
     * @return $this
     */
    public function setParameters($parameters)
    {
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \Swagger\Client\Model\Payments
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \Swagger\Client\Model\Payments $payments payments
     *
     * @return $this
     */
    public function setPayments($payments)
    {
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \Swagger\Client\Model\JustId
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \Swagger\Client\Model\JustId $product product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets promotion
     *
     * @return \Swagger\Client\Model\Promotion
     */
    public function getPromotion()
    {
        return $this->container['promotion'];
    }

    /**
     * Sets promotion
     *
     * @param \Swagger\Client\Model\Promotion $promotion promotion
     *
     * @return $this
     */
    public function setPromotion($promotion)
    {
        $this->container['promotion'] = $promotion;

        return $this;
    }

    /**
     * Gets publication
     *
     * @return \Swagger\Client\Model\Publication
     */
    public function getPublication()
    {
        return $this->container['publication'];
    }

    /**
     * Sets publication
     *
     * @param \Swagger\Client\Model\Publication $publication publication
     *
     * @return $this
     */
    public function setPublication($publication)
    {
        $this->container['publication'] = $publication;

        return $this;
    }

    /**
     * Gets selling_mode
     *
     * @return \Swagger\Client\Model\SellingModeWithNetPrice
     */
    public function getSellingMode()
    {
        return $this->container['selling_mode'];
    }

    /**
     * Sets selling_mode
     *
     * @param \Swagger\Client\Model\SellingModeWithNetPrice $selling_mode selling_mode
     *
     * @return $this
     */
    public function setSellingMode($selling_mode)
    {
        $this->container['selling_mode'] = $selling_mode;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return \Swagger\Client\Model\ExtendedTax
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param \Swagger\Client\Model\ExtendedTax $tax tax
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets size_table
     *
     * @return \Swagger\Client\Model\JustId
     */
    public function getSizeTable()
    {
        return $this->container['size_table'];
    }

    /**
     * Sets size_table
     *
     * @param \Swagger\Client\Model\JustId $size_table size_table
     *
     * @return $this
     */
    public function setSizeTable($size_table)
    {
        $this->container['size_table'] = $size_table;

        return $this;
    }

    /**
     * Gets stock
     *
     * @return \Swagger\Client\Model\Stock
     */
    public function getStock()
    {
        return $this->container['stock'];
    }

    /**
     * Sets stock
     *
     * @param \Swagger\Client\Model\Stock $stock stock
     *
     * @return $this
     */
    public function setStock($stock)
    {
        $this->container['stock'] = $stock;

        return $this;
    }

    /**
     * Gets tecdoc_specification
     *
     * @return \Swagger\Client\Model\TecdocSpecification
     */
    public function getTecdocSpecification()
    {
        return $this->container['tecdoc_specification'];
    }

    /**
     * Sets tecdoc_specification
     *
     * @param \Swagger\Client\Model\TecdocSpecification $tecdoc_specification tecdoc_specification
     *
     * @return $this
     */
    public function setTecdocSpecification($tecdoc_specification)
    {
        $this->container['tecdoc_specification'] = $tecdoc_specification;

        return $this;
    }

    /**
     * Gets b2b
     *
     * @return \Swagger\Client\Model\B2b
     */
    public function getB2b()
    {
        return $this->container['b2b'];
    }

    /**
     * Sets b2b
     *
     * @param \Swagger\Client\Model\B2b $b2b b2b
     *
     * @return $this
     */
    public function setB2b($b2b)
    {
        $this->container['b2b'] = $b2b;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Last update date: Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ. Cannot be modified
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets validation
     *
     * @return \Swagger\Client\Model\Validation
     */
    public function getValidation()
    {
        return $this->container['validation'];
    }

    /**
     * Sets validation
     *
     * @param \Swagger\Client\Model\Validation $validation validation
     *
     * @return $this
     */
    public function setValidation($validation)
    {
        $this->container['validation'] = $validation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
